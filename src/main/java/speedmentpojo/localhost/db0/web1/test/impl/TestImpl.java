package speedmentpojo.localhost.db0.web1.test.impl;

import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;
import speedmentpojo.localhost.db0.web1.test.Test;

/**
 * An implementation representing an entity (for example, a row) in the Table
 * 'localhost.db0.web1.test'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class TestImpl extends AbstractBaseEntity<Test> implements Test {
    
    private Integer id;
    private String sex;
    
    TestImpl(Speedment speedment) {
        super(speedment);
    }
    
    public TestImpl(Speedment speedment, final Test test) {
        super(speedment);
        setId(test.getId());
        test.getSex().ifPresent(this::setSex);
    }
    
    @Override
    public Integer getId() {
        return id;
    }
    
    @Override
    public Optional<String> getSex() {
        return Optional.ofNullable(sex);
    }
    
    @Override
    public final TestImpl setId(Integer id) {
        this.id = id;
        return this;
    }
    
    @Override
    public final TestImpl setSex(String sex) {
        this.sex = sex;
        return this;
    }
    
    @Override
    public Test copy() {
        return new TestImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "+Objects.toString(getId()));
        sj.add("sex = "+Objects.toString(getSex().orElse(null)));
        return "TestImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Test)) { return false; }
        @SuppressWarnings("unchecked")
        final Test thatTest = (Test)that;
        if (!Objects.equals(this.getId(), thatTest.getId())) {return false; }
        if (!Objects.equals(this.getSex(), thatTest.getSex())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getSex());
        return hash;
    }
    
    @Override
    public Class<Test> getEntityClass_() {
        return Test.class;
    }
}