package speedmentpojo.localhost.db0.web1.person.impl;

import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;
import speedmentpojo.localhost.db0.web1.person.Person;

/**
 * An implementation representing an entity (for example, a row) in the Table
 * 'localhost.db0.web1.person'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class PersonImpl extends AbstractBaseEntity<Person> implements Person {
    
    private Long id;
    private String name;
    private String password;
    
    PersonImpl(Speedment speedment) {
        super(speedment);
    }
    
    public PersonImpl(Speedment speedment, final Person person) {
        super(speedment);
        setId(person.getId());
        person.getName().ifPresent(this::setName);
        person.getPassword().ifPresent(this::setPassword);
    }
    
    @Override
    public Long getId() {
        return id;
    }
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public Optional<String> getPassword() {
        return Optional.ofNullable(password);
    }
    
    @Override
    public final PersonImpl setId(Long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public final PersonImpl setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public final PersonImpl setPassword(String password) {
        this.password = password;
        return this;
    }
    
    @Override
    public Person copy() {
        return new PersonImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "+Objects.toString(getId()));
        sj.add("name = "+Objects.toString(getName().orElse(null)));
        sj.add("password = "+Objects.toString(getPassword().orElse(null)));
        return "PersonImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Person)) { return false; }
        @SuppressWarnings("unchecked")
        final Person thatPerson = (Person)that;
        if (!Objects.equals(this.getId(), thatPerson.getId())) {return false; }
        if (!Objects.equals(this.getName(), thatPerson.getName())) {return false; }
        if (!Objects.equals(this.getPassword(), thatPerson.getPassword())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getPassword());
        return hash;
    }
    
    @Override
    public Class<Person> getEntityClass_() {
        return Person.class;
    }
}